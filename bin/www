#!/usr/bin/env node

/**
 * Module dependencies.
 */

var fs = require('fs');
var app = require('../app');
var debug = require('debug')('fba-tools-api:server');
var http = require('http');
var https = require('https');


/**
 * Get port from environment and store in Express.
 */

var privateKey = fs.readFileSync('sslcert/fba.tools.key', 'utf8');
var certificate = fs.readFileSync('sslcert/fba.tools.cert', 'utf8');
var credentials = {key: privateKey, cert: certificate};

var https_port = normalizePort('3443');
var http_port = normalizePort(process.env.PORT || '3000');


/**
 * Create HTTP server.
 */
var httpServer = http.createServer(app);
var httpsServer = https.createServer(credentials, app);

/**
 * Listen on provided port, on all network interfaces.
 */

httpServer.listen(http_port);
httpsServer.listen(https_port);

httpServer.on('error', onHttpError);
httpServer.on('listening', onHttpListening);

httpsServer.on('error', onHttpsError);
httpsServer.on('listening', onHttpsListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onHttpError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof http_port === 'string'
    ? 'Pipe ' + http_port
    : 'Port ' + http_port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onHttpsError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof https_port === 'string'
    ? 'Pipe ' + https_port
    : 'Port ' + https_port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onHttpListening() {
  var addr = httpServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('HTTP Listening on ' + bind);
}

function onHttpsListening() {
  var addr = httpsServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
    console.log('HTTPS Listening on ' + bind);
}

/**
 * CATCH unhandled errors
 */
process.on('unhandledRejection', error => {
  console.log("Unhandled Exception..");
});